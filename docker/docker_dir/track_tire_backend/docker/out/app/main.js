/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app/app.js":
/*!********************!*\
  !*** ./app/app.js ***!
  \********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var __dirname = \"app\";\nvar createError = __webpack_require__(/*! http-errors */ \"http-errors\");\r\nvar express = __webpack_require__(/*! express */ \"express\");\r\nvar path = __webpack_require__(/*! path */ \"path\");\r\nvar cookieParser = __webpack_require__(/*! cookie-parser */ \"cookie-parser\");\r\nconst cors = __webpack_require__(/*! cors */ \"cors\");\r\nconst bodyParser = __webpack_require__(/*! body-parser */ \"body-parser\");\r\nvar morgan = __webpack_require__(/*! morgan */ \"morgan\");\r\nvar fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst rfs = __webpack_require__(/*! rotating-file-stream */ \"rotating-file-stream\");\r\nconst basicAuth = __webpack_require__(/*! express-basic-auth */ \"express-basic-auth\");\r\nconst _config = __webpack_require__(/*! ./appSetting.js */ \"./app/appSetting.js\");\r\nconst databaseConnect = __webpack_require__(/*! ./dbconnect.js */ \"./app/dbconnect.js\");\r\n/**\r\n * Import routes\r\n */\r\nvar indexRouter = __webpack_require__(/*! ./routes/index */ \"./app/routes/index.js\");\r\nvar authRouter = __webpack_require__(/*! ./routes/auth */ \"./app/routes/auth.js\");\r\nvar masterMenuRouter = __webpack_require__(/*! ./routes/masterMenu */ \"./app/routes/masterMenu.js\");\r\nvar vehicleRoute = __webpack_require__(/*! ./routes/vehicle */ \"./app/routes/vehicle.js\");\r\n\r\nvar app = express();\r\n/**\r\n * Swagger generate route\r\n */\r\nconst swaggerUi = __webpack_require__(/*! swagger-ui-express */ \"swagger-ui-express\");\r\n\r\nconst swaggerDocument = __webpack_require__(/*! ./swagger.json */ \"./app/swagger.json\");\r\nswaggerDocument.host = _config.host + \":\" + _config.port;\r\n\r\napp.use(\r\n  \"/api-docs\",\r\n  basicAuth({\r\n    users: { TTT: _config.passwordSwagger },\r\n    challenge: true,\r\n  }),\r\n  swaggerUi.serve,\r\n  swaggerUi.setup(swaggerDocument)\r\n);\r\n\r\n/**\r\n * \r\n * Log Control\r\n */\r\nif (app.get(\"env\") == \"production\") {\r\n  let accessLogStream = rfs.createStream(log_file_name, {\r\n    size: \"2M\",\r\n    interval: \"1d\",\r\n    path: _config.logAccessPath,\r\n  });\r\n  app.use(morgan({ stream: accessLogStream }));\r\n} else {\r\n  app.use(morgan('dev')); //log to console on development\r\n}\r\n/** \r\n * view engine setup\r\n */\r\napp.set(\"views\", path.join(__dirname, \"views\"));\r\napp.set(\"view engine\", \"pug\");\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(express.static(path.join(__dirname, \"public\")));\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\n\r\n/** \r\n * Router\r\n */\r\n\r\napp.use(\"/\", indexRouter);\r\napp.use(\"/auth\", authRouter.router);\r\napp.use(\"/api/masterMenu\", masterMenuRouter);\r\napp.use(\"/api/vehicle\",vehicleRoute);\r\n/** \r\n * Eerror\r\n */\r\napp.use(function (req, res, next) {\r\n  next(createError(404));\r\n});\r\n\r\napp.use(function (err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get(\"env\") === \"development\" ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render(\"error\");\r\n});\r\n\r\napp.disable(\"x-powered-by\");\r\n\r\nmodule.exports = app;\r\n\n\n//# sourceURL=webpack://track-tire-backend/./app/app.js?");

/***/ }),

/***/ "./app/appSetting.js":
/*!***************************!*\
  !*** ./app/appSetting.js ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const config = __webpack_require__(/*! ./appSettingSite.js */ \"./app/appSettingSite.js\");\nvar _config ={\n    development:{\n    \n    \"dbConnect\":{\n        \"user\":config.DB_USERNAME_DEV,\n        \"host\": config.DB_SERVER_DEV,\n        \"database\": config.DB_NAME_DEV,\n        \"password\": config.DB_PASSWORD_DEV,\n        \"port\":config.DB_PORT_DEV,\n        \"max\": 10,\n        \"idleTimeoutMillis\": 30000,\n        \"connectionTimeoutMillis\": 5000,\n    },\n    \"dbLogConnect\":{\n        \"user\":config.LOG_DB_USERNAME_DEV,\n        \"host\": config.LOG_DB_SERVER_DEV,\n        \"database\": config.LOG_DB_NAME_DEV,\n        \"password\": config.LOG_DB_PASSWORD_DEV,\n        \"port\":config.LOG_DB_PORT_DEV,\n        \"max\": 10,\n        \"idleTimeoutMillis\": 30000,\n        \"connectionTimeoutMillis\": 5000\n    }\n} ,\nproduction:{\n    \n    \"dbConnect\":{\n        \"user\":config.DB_USERNAME_PROD,\n        \"host\": config.DB_SERVER_PROD,\n        \"database\": config.DB_NAME_PROD,\n        \"password\": config.DB_PASSWORD_PROD,\n        \"port\":config.DB_PORT_PROD,\n        \"max\": 10,\n        \"idleTimeoutMillis\": 30000,\n        \"connectionTimeoutMillis\": 5000,\n    },\n    \"dbLogConnect\":{\n        \"user\":config.LOG_DB_USERNAME_PROD,\n        \"host\": config.LOG_DB_SERVER_PROD,\n        \"database\": config.LOG_DB_NAME_PROD,\n        \"password\": config.LOG_DB_PASSWORD_PROD,\n        \"port\":config.LOG_DB_PORT_PROD,\n        \"max\": 10,\n        \"idleTimeoutMillis\": 30000,\n        \"connectionTimeoutMillis\": 5000\n    }\n} ,\n \n\n}\n\nmodule.exports ={\n    \"dbConnect\":_config[config.START_PROJECT],\n    \"FTPConnect\": {\n        \"host\": config.FTP_CONNECT_HOST ,\n        \"user\": config.FTP_CONNECT_USER ,\n        \"password\": config.FTP_CONNECT_PASSWORD ,\n        \"remotePath\": config.FTP_CONNECT_REMOTE_PATH,\n        \"localPath\": config.FTP_CONNECT_LOCAL_PATH\n   },\n   \"host\":config.HOST,\n   \"port\":config.PORT,\n   \"jwtSecret\":config.JWTSECRET,\n   \"customHeaderKey\":config.CUSTOMHERDERKEY,\n   \"userSwagger\":config.USERSWAGGER,\n   \"passwordSwagger\":config.PASSWORDSWAGGER,\n   \"fixData\":{\n       \"material_unit\":{\n           \"Piece\":config.FIXDATA_MATERIAL_UNIT_PIECE,\n           \"Weight\":config.FIXDATA_MATERIAL_UNIT_WEIGHT\n       }\n   },\n   \"logAccessPath\":config.LOGACCESSPATH\n   ,\n   \"passwordAcademy\":config.PASSWORDACADEMY\n\n\n    }\n\n//# sourceURL=webpack://track-tire-backend/./app/appSetting.js?");

/***/ }),

/***/ "./app/appSettingSite.js":
/*!*******************************!*\
  !*** ./app/appSettingSite.js ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("(__webpack_require__(/*! dotenv */ \"dotenv\").config)({ path:process.cwd()+ '/.env' })\r\n\r\nmodule.exports ={\r\n \r\nSTART_PROJECT:process.env.START_PROJECT,\r\n\r\n\r\nDB_SERVER_DEV:process.env.DB_SERVER_DEV,\r\nDB_USERNAME_DEV:process.env.DB_USERNAME_DEV,\r\nDB_PASSWORD_DEV:process.env.DB_PASSWORD_DEV,\r\nDB_NAME_DEV:process.env.DB_NAME_DEV,\r\nDB_PORT_DEV:process.env.DB_PORT_DEV,\r\nLOG_DB_SERVER_DEV:process.env.LOG_DB_SERVER_DEV,\r\nLOG_DB_USERNAME_DEV:process.env.LOG_DB_USERNAME_DEV,\r\nLOG_DB_PASSWORD_DEV:process.env.LOG_DB_PASSWORD_DEV,\r\nLOG_DB_NAME_DEV:process.env.LOG_DB_NAME_DEV,\r\nLOG_DB_PORT_DEV:process.env.LOG_DB_PORT_DEV,\r\n\r\n\r\nDB_SERVER_PROD:process.env.DB_SERVER_PROD,\r\nDB_USERNAME_PROD:process.env.DB_USERNAME_PROD,\r\nDB_PASSWORD_PROD:process.env.DB_PASSWORD_PROD,\r\nDB_NAME_PROD:process.env.DB_NAME_PROD,\r\nDB_PORT_PROD:process.env.DB_PORT_PROD,\r\nLOG_DB_SERVER_PROD:process.env.LOG_DB_SERVER_PROD,\r\nLOG_DB_USERNAME_PROD:process.env.LOG_DB_USERNAME_PROD,\r\nLOG_DB_PASSWORD_PROD:process.env.LOG_DB_PASSWORD_PROD,\r\nLOG_DB_NAME_PROD:process.env.LOG_DB_NAME_PROD,\r\nLOG_DB_PORT_PROD:process.env.LOG_DB_PORT_PROD,\r\n\r\nFTP_CONNECT_HOST:process.env.FTP_CONNECT_HOST,\r\nFTP_CONNECT_USER:process.env.FTP_CONNECT_USER,\r\nFTP_CONNECT_PASSWORD:process.env.FTP_CONNECT_PASSWORD,\r\nFTP_CONNECT_REMOTE_PATH:process.env.FTP_CONNECT_REMOTE_PATH,\r\nFTP_CONNECT_LOCAL_PATH:process.env.FTP_CONNECT_LOCAL_PATH,\r\n\r\nHOST:process.env.HOST,\r\nPORT:process.env.PORT,\r\nJWTSECRET:process.env.JWTSECRET,\r\nCUSTOMHERDERKEY:process.env.CUSTOMHERDERKEY,\r\nUSERSWAGGER:process.env.USERSWAGGER,\r\nPASSWORDSWAGGER:process.env.PASSWORDSWAGGER,\r\nFIXDATA_MATERIAL_UNIT_PIECE:process.env.FIXDATA_MATERIAL_UNIT_PIECE,\r\nFIXDATA_MATERIAL_UNIT_WEIGHT:process.env.FIXDATA_MATERIAL_UNIT_WEIGHT,\r\nLOGACCESSPATH:process.env.LOGACCESSPATH,\r\nPASSWORDACADEMY:process.env.PASSWORDACADEMY,\r\n}\n\n//# sourceURL=webpack://track-tire-backend/./app/appSettingSite.js?");

/***/ }),

/***/ "./app/bin/www.js":
/*!************************!*\
  !*** ./app/bin/www.js ***!
  \************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// #!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar app = __webpack_require__(/*! ../app */ \"./app/app.js\");\nvar debug = __webpack_require__(/*! debug */ \"debug\")('webapi:server');\nvar http = __webpack_require__(/*! http */ \"http\");\nvar _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\n/**\n * Get port from environment and store in Express.\n */\n\nvar port = normalizePort(process.env.PORT || _config.port);\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nvar server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  var bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  var addr = server.address();\n  var bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n\n\n//# sourceURL=webpack://track-tire-backend/./app/bin/www.js?");

/***/ }),

/***/ "./app/cryptoSetting.js":
/*!******************************!*\
  !*** ./app/cryptoSetting.js ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var CryptoJS = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nvar appSetting = __webpack_require__(/*! ./appSetting.js */ \"./app/appSetting.js\");\r\nconst SECRET = appSetting.jwtSecret;\r\n\r\nconst iv = CryptoJS.enc.Hex.parse(\"50616e796154686f6e676d75616e67\");\r\n\r\nconst encrypt = (wording) => {\r\n    return CryptoJS.AES.encrypt(wording, SECRET,{iv:iv}).toString()\r\n}\r\nconst decrypt=(wording)=>{\r\n    return  CryptoJS.AES.decrypt(wording, SECRET,{iv:iv}).toString(CryptoJS.enc.Utf8);\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    encrypt: encrypt,\r\n    decrypt: decrypt\r\n}\n\n//# sourceURL=webpack://track-tire-backend/./app/cryptoSetting.js?");

/***/ }),

/***/ "./app/dbconnect.js":
/*!**************************!*\
  !*** ./app/dbconnect.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {\n  Client,\n  Pool\n} = __webpack_require__(/*! pg */ \"pg\")\nvar dbConnect = __webpack_require__(/*! ./appSetting.js */ \"./app/appSetting.js\");\n// const connectionString = 'postgresql://postgres:mysecretpassword@localhost:5432/testx';\n// const pool = new Pool({\n//     connectionString: connectionString,\n//   })\nlet config = dbConnect.dbConnect.dbConnect;\nconst pool = new Pool(config);\ntry {\n  pool.connect((err, db) => {\n    if (err) {\n      console.log(\"error connect pool\", err)\n    } else {\n      db.query('SELECT NOW()', (err, result) => {\n        if (err) console.log(\"error connect test Select\", err);\n        console.log('connect database-->', result.rows)\n      })\n    }\n\n  });\n\n} catch (e) {\n  console.log(\"error connect pool\", e)\n} finally {\n\n}\n\n// var client = new Client({\n//     connectionString: connectionString,\n//   })\n// client.connect()\n// client.query('SELECT NOW()', (err, res) => {\n//   console.log(err, res)\n//   client.end()\n// })\n\nmodule.exports = {\n  connectionPool: pool,\n  config: config\n};\n\n//# sourceURL=webpack://track-tire-backend/./app/dbconnect.js?");

/***/ }),

/***/ "./app/jwtSetting.js":
/*!***************************!*\
  !*** ./app/jwtSetting.js ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const jwt = __webpack_require__(/*! jwt-simple */ \"jwt-simple\");\nvar moment = __webpack_require__(/*! moment */ \"moment\");\nvar appSetting = __webpack_require__(/*! ./appSetting.js */ \"./app/appSetting.js\");\nvar userService = __webpack_require__(/*! ./service/userService */ \"./app/service/userService.js\")\nvar _userService = new userService();\n//ใช้ในการ decode jwt ออกมา\nconst ExtractJwt = (__webpack_require__(/*! passport-jwt */ \"passport-jwt\").ExtractJwt);\n//ใช้ในการประกาศ Strategy\nconst JwtStrategy = (__webpack_require__(/*! passport-jwt */ \"passport-jwt\").Strategy);\nconst SECRET = appSetting.jwtSecret; \nconst jwtOptions = {\n   jwtFromRequest: ExtractJwt.fromHeader(\"authorization\"),\n   secretOrKey: SECRET,//SECRETเดียวกับตอนencodeในกรณีนี้คือ MY_SECRET_KEY\n}\nconst jwtAuth = new JwtStrategy(jwtOptions, (payload, done) => {\n   if(payload.sys==\"c\"){\n        _userService.checkAuth(payload.sub).then((res)=>(res.rows.length>0)?done(null, true):done(null, false)).catch(e=>done(null, false))\n   } else{\n        _userService.checkAdminAuth(payload.fup).then((res)=>(res.rows.length>0)?done(null, true):done(null, false)).catch(e=>done(null, false))\n   }\n});\n\nmodule.exports = {\n    SECRET : SECRET,\n    jwtAuth:jwtAuth\n};\n\n//# sourceURL=webpack://track-tire-backend/./app/jwtSetting.js?");

/***/ }),

/***/ "./app/routes/auth.js":
/*!****************************!*\
  !*** ./app/routes/auth.js ***!
  \****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var express = __webpack_require__(/*! express */ \"express\");\nvar router = express.Router();\nvar baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\nvar _baseService = new baseService();\nvar userService = __webpack_require__(/*! ../service/userService */ \"./app/service/userService.js\");\nvar _userService = new userService();\nconst _QueryLogin = __webpack_require__(/*! ../query/queryLogin.json */ \"./app/query/queryLogin.json\");\nvar _QueryCompany = __webpack_require__(/*! ../query/queryCompany.json */ \"./app/query/queryCompany.json\");\nvar companyService = __webpack_require__(/*! ../service/companyService */ \"./app/service/companyService.js\");\nvar _companyService = new companyService();\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\n\nconst jwt = __webpack_require__(/*! jwt-simple */ \"jwt-simple\");\nvar moment = __webpack_require__(/*! moment */ \"moment\");\nvar JwtSetting = __webpack_require__(/*! ../jwtSetting */ \"./app/jwtSetting.js\");\nconst passport = __webpack_require__(/*! passport */ \"passport\");\npassport.use(JwtSetting.jwtAuth);\nconst cryptoOption = __webpack_require__(/*! ../cryptoSetting */ \"./app/cryptoSetting.js\");\nconst permissionService = __webpack_require__(/*! ../service/permissionService */ \"./app/service/permissionService.js\");\nconst TokenEncode = (payload) => {\n  return jwt.encode(payload, JwtSetting.SECRET);\n};\nconst TokenDecode = (token) => {\n  return jwt.decode(token, JwtSetting.SECRET);\n};\nconst getUserIDByToken = (token) => {\n  let payload = TokenDecode(token);\n  if (payload.fup && payload.sys == \"c\") {\n    return payload.fup;\n  }\n  return null;\n};\nconst getAdminIDByToken = (token) => {\n  let payload = TokenDecode(token);\n  if (payload.fup && payload.sys == \"s\") {\n    return payload.fup;\n  }\n  return null;\n};\nconst getCompanyIdByToken = (token) => {\n  let payload = TokenDecode(token);\n  if (payload.com && payload.sys == \"c\") {\n    return payload.com;\n  }\n  return null;\n};\nconst getPayload = (token) => {\n  return TokenDecode(token);\n};\nconst requireJWTAuth = passport.authenticate(\"jwt\", {\n  session: false,\n});\n\nrouter.post(\"/login\", async (req, res, next) => {\n  if (req.body.user && req.body.password) {\n    _baseService\n      .baseQueryWithParameter(_QueryLogin.checkUserPassword, [req.body.user])\n      .then((_res) => {\n        if (_res.rows.length > 0) {\n          if (\n            req.body.password == cryptoOption.decrypt(_res.rows[0].iu_password)\n          ) {\n            _companyService\n              .findByIdCompany(_res.rows[0].iu_company_id)\n              .then((_res2) => {\n                var iat = moment(_res2.now);\n                var exp = moment(new Date()).add(7, \"days\");\n                const payload = {\n                  sub: req.body.user,\n                  fup: _res.rows[0].iu_id,\n                  com: _res.rows[0].iu_company_id,\n                  sys: \"c\",\n                  iat: iat.unix(),\n                  exp: exp.unix(),\n                };\n                var token = TokenEncode(payload);\n                _userService\n                  .updateUserToken(token, iat, exp, req.body.user)\n                  .then((__res) => {\n                    res.status(200).json({\n                      message: \"login sucess\",\n                      iat: iat,\n                      exp: exp,\n                      token: token,\n                    });\n                  })\n                  .catch((e) => {\n                    res.status(500).send({\n                      message: \"login fail : Try again\",\n                    });\n                  });\n              });\n          } else {\n            res.status(200).json({\n              message: \"login fail : Wrong username or password\",\n            });\n          }\n        } else {\n          res.status(200).json({\n            message: \"login fail : Wrong username or password\",\n          });\n        }\n      })\n      .catch((_error) => {\n        res.status(400).send({\n          message: _error.message,\n        });\n      });\n  } else {\n    res.status(200).send({\n      message: \"login fail : Wrong username or password\",\n    });\n  }\n});\n\nrouter.post(\"/authorized/service\", async (req, res, next) => {\n  var token = req.headers.authorization;\n  var user_id = _getUserIDByToken(token);\n  let _logService = new logService();\n  let _log = _logService.model;\n\n  _log.activity.parameter = {\n    body: req.body,\n    query: req.query,\n    header: req.headers,\n    payload: _getPayload(token),\n  };\n  _log.activity.path = req.baseUrl + req.path;\n\n\n});\n\nrouter.post('/login/admin', async (req, res, next) => {\n \n    if (req.body.user && req.body.password) {\n        _baseService.baseQueryWithParameter(_QueryLogin.checkAdminPassword, [req.body.user, req.body.password]).then(_res => {\n            if (_res.rows.length > 0) {\n                var iat = moment(new Date());\n                var exp = moment(new Date()).add(7, 'days'); // exp:moment(new Date()).add(7,'days').unix()//days,hours,minutes\n                const payload = {\n                    sub: req.body.user,\n                    fup: _res.rows[0].id,\n                    sys: \"s\",\n                    iat: iat.unix(),\n                    exp: exp.unix()\n                };\n                var token = TokenEncode(payload);\n\n                console.log(iat, exp, req.body.user);\n                _userService.updateAdminToken(token, iat, exp, req.body.user).then(__res => {\n                    res.status(200).json({\n                        message: 'login sucess',\n                        iat: iat,\n                        exp: exp,\n                        token: token\n                    })\n                }).catch(e => {\n                    res.status(500).send({\n                        message: 'login fail : Try again'\n                    })\n                })\n\n            } else {\n                res.status(200).json({\n                    message: 'login fail : Wrong username or password',\n                })\n            }\n\n        }).catch(_error => {\n            res.status(400).send({\n                message: _error.message\n            })\n        })\n    } else {\n        res.status(200).send({\n            message: 'login fail : Wrong username or password'\n        })\n    }\n});\n\nrouter.get(\"/test\", requireJWTAuth, (req, res) => {\n  res.status(200).json({\n    message: \"You Are Authorize\",\n  });\n});\n\nmodule.exports = {\n  router: router,\n  requireJWTAuth: requireJWTAuth,\n  getUserIDByToken: getUserIDByToken,\n  getAdminIDByToken: getAdminIDByToken,\n  getPayload: getPayload,\n  getCompanyIdByToken: getCompanyIdByToken,\n};\n\n\n//# sourceURL=webpack://track-tire-backend/./app/routes/auth.js?");

/***/ }),

/***/ "./app/routes/index.js":
/*!*****************************!*\
  !*** ./app/routes/index.js ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var express = __webpack_require__(/*! express */ \"express\");\nvar router = express.Router();\n/* var baseService = require('../service/baseService'); */\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\n/* const {\n    route\n} = require('./users'); */\nconst path = __webpack_require__(/*! path */ \"path\");\n/* const fs = require('fs'); */\n/* var _baseService = new baseService(); */\n\n/* GET home page. */\nrouter.get('/', function (req, res, next) {\n    res.render('index', {\n        title: 'Save Yang V0.0.1'\n    });\n});\n\nrouter.get('/TestConnect2', function (req, res, next) {\n\n    _baseService.TestConnnect2().then(_res => {\n        res.status(200).json(_res.rows)\n    }).catch(_error => {\n        res.status(400).send({\n            message: _error.message\n        })\n    })\n\n});\n\n// a middleware function with no mount path. This code is executed for every request to the router\nrouter.use(function (req, res, next) {\n    if (req.headers[\"x-ttt\"] == _config.customHeaderKey) {\n        next();\n    } else if ((req.baseUrl + req.path).indexOf(\"static\") > -1) {\n        next();\n    } else if((req.baseUrl + req.path).indexOf(\"logAccess\") > -1) {\n        next();\n    }\n    else {\n        return res.status(404).send(\"i see you \\n (⊙.⊙(☉̃ₒ☉)⊙.⊙)\")\n    }\n})\n\nrouter.get('/static/:code', async (req, res, next) =>{\n    try {\n        if (req.params.code) {\n            var f = Buffer.from(req.params.code, 'base64').toString('utf8');\n            if (f.indexOf(\"./uploads\") == 0) {\n                if(f.indexOf(\"/logs/\") == 9){\n                    return res.status(404).send(\"The file does not exist\");\n                }\n                var temp = path.resolve(f);\n                fs.access(temp, error => {\n                    if (!error) {\n                        res.setHeader('Content-Disposition', 'attachment; filename=' + path.basename(temp));\n                        res.setHeader('Content-Transfer-Encoding', 'binary');\n                        res.setHeader('Content-Type', 'application/octet-stream');\n                        res.sendFile(temp,{},(err)=>{\n                            if (err) {\n                                next(err)\n                            }\n                        });\n                    } else {\n                        return res.status(404).send(\"The file does not exist\");\n                    }\n                });\n                // if (fs.existsSync(temp)) {\n                //     res.setHeader('Content-Disposition', 'attachment; filename=' + path.basename(temp));\n                //     res.setHeader('Content-Transfer-Encoding', 'binary');\n                //     res.setHeader('Content-Type', 'application/octet-stream');\n                //     res.sendFile(temp);\n                //     console.log(\"The file exists.\");\n                // } else {\n                //     return res.status(404).send(\"The file does not exist\");\n                // }\n            }else{\n                return res.status(404).send(\"The file does not exist\");\n            }\n\n        } else {\n            return res.status(404).send(\"The file does not exist\");\n        }\n\n    } catch (ex) {\n        return res.status(500).json(ex.message);\n    }\n    //    Buffer.from(fullPath).toString('base64')\n\n});\n\nmodule.exports = router;\n\n//# sourceURL=webpack://track-tire-backend/./app/routes/index.js?");

/***/ }),

/***/ "./app/routes/masterMenu.js":
/*!**********************************!*\
  !*** ./app/routes/masterMenu.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\n\r\nconst masterMenuService = __webpack_require__(/*! ../service/masterMenuService */ \"./app/service/masterMenuService.js\");\r\nconst _masterMenuService= new masterMenuService();\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    console.log(\"เข้า\");\r\n    return res.send('respond with a resource project');\r\n});\r\n\r\n\r\nrouter.post('/add',/*  _auth, */ async (req, res, next) => {\r\n     var token = req.headers.authorization;\r\n     var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _masterMenuService.addMenu(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/getMenuByID',/*  _auth, */ async (req, res, next) => {\r\n     var token = req.headers.authorization;\r\n     var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _masterMenuService.getMenuByID(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/filter',/*  _auth, */ async (req, res, next) => {\r\n     var token = req.headers.authorization;\r\n     var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _masterMenuService.filter(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/del', /* _auth, */  async (req, res, next) => {\r\n     var token = req.headers.authorization;\r\n     var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    console.log(\"เข้า\");\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _masterMenuService.delMenu(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/update', /* _auth, */  async (req, res, next) => {\r\n     var token = req.headers.authorization;\r\n     var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    console.log(\"เข้า\");\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _masterMenuService.updateMenu(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/getPermissByUser', /* _auth, */  async (req, res, next) => {\r\n     var token = req.headers.authorization;\r\n     var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    // console.log(\"เข้า\",user_id);\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _masterMenuService.getPermissByUser(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack://track-tire-backend/./app/routes/masterMenu.js?");

/***/ }),

/***/ "./app/routes/vehicle.js":
/*!*******************************!*\
  !*** ./app/routes/vehicle.js ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ./auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst vehicleService = __webpack_require__(/*! ../service/vehicleService */ \"./app/service/vehicleService.js\");\r\nconst _vehicleService = new vehicleService();\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource project');\r\n});\r\n\r\nrouter.post('/filterVehicle', /* _auth, */ async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    console.log(\"sda\");\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _vehicleService.filterVehicle(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); \r\n\r\nrouter.get('/delVehicle',/*  _auth,  */async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _vehicleService.delVehicle(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n \r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack://track-tire-backend/./app/routes/vehicle.js?");

/***/ }),

/***/ "./app/service/baseService.js":
/*!************************************!*\
  !*** ./app/service/baseService.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {\n    Client,\n    Pool\n} = __webpack_require__(/*! pg */ \"pg\")\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\nconst connectionPool = connectionSetting.connectionPool;\nconst connectionConfig = connectionSetting.config;\n\nclass baseService {\n    TestConnnect() {\n        return new Promise(((resolve, reject) => {\n            connectionPool.connect((err, db) => {\n                if (err) reject(err);\n                db.query('SELECT NOW()', (err, result) => {\n                    if (err) reject(err);\n                    resolve(result);\n                })\n            });\n        }));\n    }\n    selectAll(table) {\n        return new Promise(((resolve, reject) => {\n            connectionPool.connect((err, db) => {\n                if (err) reject(err);\n                db.query('SELECT * FROM ' + table, (err, result) => {\n                    if (err) reject(err);\n                    resolve(result);\n                })\n            });\n        }));\n    }\n    TestConnnect2() {\n        return new Promise(((resolve, reject) => {\n            var client = new Client(connectionConfig)\n            client.connect((err, db) => {\n                if (err) reject(err);\n                db.query('SELECT NOW()').then(result => resolve(result)).catch(err => reject(err)).then(() => client.end());\n            })\n\n        }))\n    }\n    baseQuery(stringQuery) {\n        return new Promise(((resolve, reject) => {\n            var client = new Client(connectionConfig)\n            client.connect((err, db) => {\n                if (err) reject(err);\n                db.query(stringQuery).then(result => resolve(result)).catch(err => reject(err)).then(() => client.end());\n            })\n\n        }))\n    }\n    baseQueryWithParameter(stringQuery, Parameter) {\n        return new Promise(((resolve, reject) => {\n            (async () => {\n                var client = new Client(connectionConfig)\n                await client.connect();\n                try {\n                    var query = await client.query(stringQuery, Parameter);\n                    resolve(query);\n                } catch (e) {\n                    reject(e);\n                } finally {\n                    await client.end();\n                }\n            })().catch(e => {\n                console.log(e);\n                reject(e);\n            })\n\n        }))\n    }\n    baseQueryWithParameterOsl(stringQuery, Parameter) {\n        return new Promise(((resolve, reject) => {\n            (async () => {\n                var client = new Client(connectionConfig)\n                await client.connect();\n                try {\n                    var query = await client.query(stringQuery, Parameter);\n                    resolve(query);\n                } catch (e) {\n                    reject(e);\n                } finally {\n                    await client.end();\n                }\n            })().catch(e => {\n                console.log(e);\n                reject(e);\n            })\n\n        }))\n    }\n\n}\nmodule.exports = baseService;\n\n//# sourceURL=webpack://track-tire-backend/./app/service/baseService.js?");

/***/ }),

/***/ "./app/service/companyService.js":
/*!***************************************!*\
  !*** ./app/service/companyService.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst {\r\n    Client,\r\n    Pool\r\n} = __webpack_require__(/*! pg */ \"pg\")\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryCompany = __webpack_require__(/*! ../query/queryCompany.json */ \"./app/query/queryCompany.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar {\r\n    v4: uuidv4\r\n} = __webpack_require__(/*! uuid */ \"uuid\");\r\nvar CryptoJS = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nvar appSetting = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst SECRET = appSetting.jwtSecret; \r\nconst cryptoOption = __webpack_require__(/*! ../cryptoSetting */ \"./app/cryptoSetting.js\");\r\nconst { config } = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst { mode } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nclass companyService {\r\n   /*  async addNewCompany(model, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n            try {\r\n                (async () => {\r\n                    var client = new Client(connectionConfig)\r\n                    await client.connect()\r\n                    try {\r\n                        await client.query('BEGIN');\r\n                        let company_id = uuidv4();\r\n                        const config_data = {\"status_inform\":null,\"po_sign\":null,\"com_name\":null,\"inform\":null,\"remark\":[{\"key\":\"status_inform\",\"remark\":\"สำหรับเปิด/ปิดประกาศตอนที่ลูกค้าเข้าสู้ระบบ\"},{\"key\":\"po_sign\",\"remark\":\"ชื่อผู็อนุมัติใบสั่งซื้อ\"},{\"key\":\"com_name\",\"remark\":\"ชื่อบริษัทลูกค้า\"},{\"key\":\"inform\",\"remark\":\"ข้อความที่จะประกาศให้ทางลูกค้าทราบ\"}]};\r\n                        await client.query(_QueryCompany.addNewCompany, [company_id, admin_id, model.company_name|| null, model.company_detail|| null, model.apply_date|| null, model.start_date|| null, model.expire_date|| null, model.is_factory_active|| null, model.logo_company|| null, model.logo_company_path|| null, model.logo_company_name|| null,model.abbr||null, config_data, moment(new Date()), true]);\r\n                        if (model.oem && model.oem.length > 0) {\r\n                            for (const o of model.oem) {\r\n                                let oem_id = uuidv4();\r\n                                await client.query(_QueryCompany.addOEMByCompany, [oem_id, company_id, admin_id, o.name|| null, o.logo|| null, o.logo_path|| null, o.logo_name|| null, moment(new Date()), true, true]);\r\n                            }\r\n                        }\r\n                        if (model.document && model.document.length > 0) {\r\n                            for (const d of model.document) {\r\n                                let doc_id = uuidv4();\r\n                                await client.query(_QueryCompany.addDocCompany, [doc_id, company_id, d.document|| null, d.document_path|| null, d.document_name|| null, moment(new Date()), true]);\r\n                            }\r\n                        }\r\n\r\n                        await client.query('COMMIT')\r\n                        console.log(\"COMMIT\")\r\n                        resolve(true);\r\n                    } catch (e) {\r\n                        await client.query('ROLLBACK')\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end()\r\n                    }\r\n                })().catch(e => {\r\n                    console.log(e);\r\n                    throw Error(e)\r\n                })\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        }))\r\n\r\n    }\r\n    async UpdateNewCompany(model, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n                await client.connect()\r\n                try {\r\n                    await client.query('BEGIN');\r\n                   \r\n                    await client.query(_QueryCompany.updateCompany, [admin_id, model.company_name|| null, model.company_detail|| null, model.apply_date|| null, model.start_date|| null, model.expire_date|| null, model.is_factory_active|| null, model.logo_company|| null, model.logo_company_path|| null, model.logo_company_name|| null, model.abbr ||null, model.id]);\r\n                    if (model.oem && model.oem.length > 0) {\r\n                        for (const o of model.oem) {\r\n                            if (o.id) {\r\n                                await client.query(_QueryCompany.updateOEMByCompany, [admin_id, o.name|| null, o.logo|| null, o.logo_path|| null, o.logo_name|| null, o.is_use, o.is_active|| null, o.id]);\r\n\r\n                            } else {\r\n                                let oem_id = uuidv4();\r\n                                await client.query(_QueryCompany.addOEMByCompany, [oem_id, model.id, admin_id, o.name|| null, o.logo|| null, o.logo_path|| null, o.logo_name|| null, moment(new Date()), true, o.is_active|| null]);\r\n                            }\r\n                        }\r\n                    }\r\n                    if (model.document && model.document.length > 0) {\r\n                        for (const d of model.document) {\r\n                            if (!d.id) {\r\n                                let doc_id = uuidv4();\r\n                                await client.query(_QueryCompany.addDocCompany, [doc_id, model.id, d.document|| null, d.document_path|| null, d.document_name|| null, moment(new Date()), true]);\r\n                            }\r\n                            if (d.id && (d.is_use == false)) {\r\n                                await client.query(_QueryCompany.updateDocCompany, [d.is_use, d.id]);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    await client.query('COMMIT')\r\n                    console.log(\"COMMIT\")\r\n                    resolve(true);\r\n                } catch (e) {\r\n                    await client.query('ROLLBACK')\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    async delCompanyById(id, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n\r\n                await client.connect()\r\n                try {\r\n                    await client.query(_QueryCompany.delCompany, [id]);\r\n                    resolve(true);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    async SetupCompany(model, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n                await client.connect()\r\n                try {\r\n                    var config_remark = [];\r\n                    //console.log(model.config);\r\n                    for(var r = 0; r < model.config.length; r++){\r\n                        let temp_remark ={\r\n                            key:model.config[r].key,\r\n                            remark:model.config[r].remark,\r\n                        }\r\n                        config_remark.push(temp_remark);\r\n                    }\r\n                    \r\n                    var obj_config = {};\r\n                    \r\n                    for(let i = 0;i < model.config.length;i++){\r\n                      if(model.config[i].is_use === true){\r\n                        var key = `${model.config[i].key}`;\r\n                   \r\n                        var value = model.config[i].value;\r\n                        obj_config[key] = value;\r\n                      }\r\n                       \r\n                   \r\n                        \r\n                         \r\n        \r\n                    }\r\n                    obj_config['remark'] = config_remark;\r\n                   // console.log(obj_config)\r\n                   // console.log(config_remark)\r\n                    //throw Error(\"break\");\r\n                \r\n          \r\n                    await client.query(_QueryCompany.setupCompany, [model.fg_min|| null, model.fg_max|| null, model.raw_min|| null, model.raw_max|| null, model.rank_a|| null, model.rank_b|| null, model.rank_c|| null, model.rank_d|| null, model.factory_capacity|| null, model.id , obj_config || null]);\r\n                    resolve(true);\r\n                } catch (e) {\r\n                    await client.query('ROLLBACK')\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    async findSetupById(id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n\r\n                await client.connect()\r\n                try {\r\n                    var company = await client.query(_QueryCompany.findCompanyById, [id]);\r\n                    if (company.rows.length > 0) {\r\n                        resolve(company.rows[0]);\r\n                    } else {\r\n                        reject(\"not found\");\r\n                    }\r\n\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }*/\r\n    async findByIdCompany(id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n\r\n                await client.connect()\r\n                try {\r\n     \r\n                    let company = await client.query(_QueryCompany.findCompanyById, [id]);\r\n                 \r\n                \r\n                    if (company.rows.length > 0) {\r\n                        \r\n                       \r\n                        resolve(company.rows[0]);\r\n                    } else {\r\n                        reject(\"not found\");\r\n                    }\r\n\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n\r\n\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    /* async getMasterCompany(id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n                var company = await client.query(_QueryCompany.getMasterCompany);\r\n                resolve(company.rows);\r\n\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    } */\r\n \r\n    //---------------------user-----------------------\r\n    async addUser(model, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n            try {\r\n                (async () => {\r\n                    var client = new Client(connectionConfig)\r\n                    await client.connect()\r\n                    try {\r\n                        await client.query('BEGIN');\r\n                        let user_id = uuidv4();\r\n                        model.password = (model.password)? cryptoOption.encrypt(model.password):null;\r\n                        var _check =  await client.query(_QueryCompany.checkUsernameEmail,[model.username|| null,model.email|| null])\r\n                        if(_check.rows.length>0){\r\n                            throw Error(\"already username or email\");\r\n                        }\r\n                        await client.query(_QueryCompany.addUser, [user_id, model.company_id, admin_id, model.name|| null, model.sirname|| null, model.username|| null, model.email|| null, model.password|| null, model.mobile1|| null, model.mobile2|| null, model.detail|| null, model.is_active|| null, model.user_profile|| null, model.user_profile_name|| null, model.user_profile_path|| null, moment(new Date()), true]);\r\n\r\n                        if (model.document && model.document.length > 0) {\r\n                            for (const d of model.document) {\r\n                                let doc_id = uuidv4();\r\n                                await client.query(_QueryCompany.addUserDoc, [doc_id, user_id, d.document|| null, d.document_name|| null, d.document_path|| null, moment(new Date()), true]);\r\n                            }\r\n                        }\r\n\r\n                        await client.query('COMMIT')\r\n                        console.log(\"COMMIT\")\r\n                        resolve(true);\r\n                    } catch (e) {\r\n                        await client.query('ROLLBACK')\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end()\r\n                    }\r\n                })().catch(e => {\r\n                    console.log(e);\r\n                    throw Error(e)\r\n                })\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        }))\r\n\r\n    }\r\n    async updateUser(model, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n            try {\r\n                (async () => {\r\n                    var client = new Client(connectionConfig)\r\n                    await client.connect()\r\n                    try {\r\n                       model.password = (model.password)? cryptoOption.encrypt(model.password):null;\r\n                        await client.query('BEGIN');\r\n                        await client.query(_QueryCompany.updateUser, [admin_id, model.name|| null, model.sirname|| null, model.username|| null, model.email|| null, model.password|| null, model.mobile1|| null, model.mobile2|| null, model.detail|| null, model.is_active|| null, model.user_profile|| null, model.user_profile_name|| null, model.user_profile_path|| null, model.id]);\r\n\r\n                        if (model.document && model.document.length > 0) {\r\n                            for (const d of model.document) {\r\n                                if (!d.id) {\r\n                                    let doc_id = uuidv4();\r\n                                    await client.query(_QueryCompany.addUserDoc, [doc_id, model.id, d.document|| null, d.document_name|| null, d.document_path|| null, moment(new Date()), true]);\r\n\r\n                                }\r\n                                if (d.id && (d.is_use == false)) {\r\n                                    await client.query(_QueryCompany.delUserDoc, [d.id]);\r\n                                }\r\n\r\n                            }\r\n                        }\r\n\r\n                        await client.query('COMMIT')\r\n                        console.log(\"COMMIT\")\r\n                        resolve(true);\r\n                    } catch (e) {\r\n                        await client.query('ROLLBACK')\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end()\r\n                    }\r\n                })().catch(e => {\r\n                    console.log(e);\r\n                    throw Error(e)\r\n                })\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        }))\r\n\r\n    }\r\n    async delUser(id, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n\r\n                await client.connect()\r\n                try {\r\n                    await client.query(_QueryCompany.delUser, [id]);\r\n                    resolve(true);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    async findUserById(id, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n\r\n                await client.connect()\r\n                try {\r\n                   var query = await client.query(_QueryCompany.findUserById, [id]);\r\n                   let temp = query.rows.length>0?query.rows[0]:{};\r\n                    if(query.rows.length>0){\r\n                        temp.password = (temp.password)? cryptoOption.decrypt(temp.password):null;\r\n                        let doc = await client.query(_QueryCompany.findDocByUser, [id]);\r\n                        temp.document=doc.rows;\r\n                    }\r\n                    resolve(temp);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    async getAllUser() {\r\n        return new Promise((async (resolve, reject) => {\r\n            (async () => {\r\n                var client = new Client(connectionConfig);\r\n                await client.connect();\r\n                try {\r\n                    let query = await client.query(_QueryCompany.getAllUser);\r\n                    resolve(query.rows);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end();\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n    }\r\n\r\n    async filterUser(model) {\r\n        return new Promise((async (resolve, reject) => {\r\n            (async () => {\r\n                var client = new Client(connectionConfig);\r\n                await client.connect();\r\n                try {\r\n                    let query = await client.query(_QueryCompany.filterUser,[\r\n                        model.name || null,\r\n                        model.username || null,\r\n                        model.email || null,\r\n                        model.company_id || null,\r\n                    ]);\r\n                    resolve(query.rows);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end();\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n    }\r\n\r\n    async getviewOemByUserId(user_id){\r\n        return new Promise((async (resolve, reject) => {\r\n            try {    \r\n                var client = new Client(connectionConfig)\r\n                await client.connect();\r\n                var query = await client.query(_QueryCompany.getviewOemByUserId, [user_id]);\r\n                // if (check.rows.length == 0) {\r\n                //     throw Error(\"not found\")\r\n                // } else {\r\n                //     await client.query(_QueryProductPlaning.updateRealOrder, [model.order,user_id,moment(new Date()),check.rows[0].id]);\r\n                // }\r\n                resolve(query.rows)\r\n            }catch(ex){\r\n                reject(ex); \r\n            }\r\n        }))\r\n    }\r\n    async findOEMByCompanyIdAndUser(user,user_id){\r\n        return new Promise((async (resolve, reject) => {\r\n            try {    \r\n                var client = new Client(connectionConfig)\r\n                await client.connect();\r\n                var query = await client.query(_QueryCompany.getUserDetailByUser, [user_id]);\r\n                \r\n                var oem = await client.query(_QueryCompany.getOEMbyCompanyId,[query.rows[0].company_id]);\r\n                var temp = {\r\n                    user_detail:query.rows[0],\r\n                    oem_list:oem.rows,\r\n                }\r\n                // if (check.rows.length == 0) {\r\n                //     throw Error(\"not found\")\r\n                // } else {\r\n                //     await client.query(_QueryProductPlaning.updateRealOrder, [model.order,user_id,moment(new Date()),check.rows[0].id]);\r\n                // }\r\n                resolve(temp)\r\n            }catch(ex){\r\n                reject(ex); \r\n            }\r\n        }))\r\n    }\r\n    \r\n\r\n}\r\nmodule.exports = companyService\n\n//# sourceURL=webpack://track-tire-backend/./app/service/companyService.js?");

/***/ }),

/***/ "./app/service/logservice.js":
/*!***********************************!*\
  !*** ./app/service/logservice.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var dbConnect = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\n/* var queryLog = require(\"../query/queryLog.json\"); */\r\nconst { Client,Pool } = __webpack_require__(/*! pg */ \"pg\")\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar {\r\n    v4: uuidv4\r\n} = __webpack_require__(/*! uuid */ \"uuid\");\r\n// let oem_id = uuidv4();\r\nvar configLog = dbConnect.dbConnect.dbLogConnect;\r\nclass logService {\r\n    async log(model) {\r\n        return new Promise(((resolve, reject) => {\r\n            (async () => {\r\n                var client = new Client(configLog)\r\n                await client.connect();\r\n                try {\r\n                    // await client.query(queryLog.add, [model.id, model.date, model.activity]);\r\n                    resolve(true);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end();\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n    }\r\n    get model() {\r\n        return {\r\n            id: uuidv4(),\r\n            date: moment(new Date()),\r\n            activity: {\r\n                status: true,\r\n                path: \"\",\r\n                parameter: {},\r\n                response:{},\r\n                error: {}\r\n            }\r\n        }\r\n    }\r\n    // logModel = {\r\n    //     id: uuidv4(),\r\n    //     date: moment(new Date()),\r\n    //     activity: {\r\n    //         status: true,\r\n    //         path: \"\",\r\n    //         parameter: {},\r\n    //         error: {}\r\n    //     }\r\n    // }\r\n    // Eaction = {\r\n    //     add: \"add\",\r\n    //     edit: \"edit\",\r\n    //     del: \"del\",\r\n    //     find: \"find\",\r\n    //     filter: \"filter\",\r\n    //     upload: \"upload\",\r\n    //     login: \"login\",\r\n    //     logout: \"logout\"\r\n    // }\r\n\r\n}\r\nmodule.exports = logService\n\n//# sourceURL=webpack://track-tire-backend/./app/service/logservice.js?");

/***/ }),

/***/ "./app/service/masterMenuService.js":
/*!******************************************!*\
  !*** ./app/service/masterMenuService.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QuerymasterMenu = __webpack_require__(/*! ../query/querymasterMenu.json */ \"./app/query/querymasterMenu.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\n\r\nclass masterMenuService{\r\n\r\n\r\n    async addMenu(model,user_id) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                console.log(\"menu\",model);\r\n             \r\n                if(model.menu_level === null || model.menu_level === \"\"){\r\n                  throw Error(\"Menu level is null\");\r\n                }else{\r\n                  // let checkMenu = await client.query(_QuerymasterMenu.checkMasterMenu,[])\r\n                  // if(checkMenu.rows.length > 0){\r\n                  //   throw Error(\"Menu นี้มีในระบบเเล้ว\");\r\n                  // }else{\r\n                    if(model.menu_level === '1'){\r\n                      let checkMenuName = await client.query(_QuerymasterMenu.checkMenuName,[\r\n                        model.menu_name,\r\n                      ])\r\n                      if(checkMenuName.rows.length > 0){\r\n                        throw Error(\"MenuName นี้มีในระบบเเล้ว\");\r\n                      }else{\r\n                        let menu_id = uuidv4();\r\n                        await client.query(_QuerymasterMenu.addMasterMenu,[\r\n                          menu_id,\r\n                          model.menu_name,\r\n                          true,\r\n                          true,\r\n                          moment(new Date()),\r\n                          moment(new Date()),\r\n                          model.company_id || null,\r\n                          model.menu_path,\r\n                          model.menu_image\r\n                        ])\r\n                      }\r\n                    }else if(model.menu_level === '2'){\r\n                      let checkMenu =  await client.query(_QuerymasterMenu.checkMenuByMmId,[\r\n                      model.menu_parent_lv1\r\n                      ])\r\n                      if(checkMenu.rows.length > 0){\r\n                        let checkMenuNameLv2 = await client.query(_QuerymasterMenu.ckeckNameMenu,[\r\n                          model.menu_name,\r\n                        ])\r\n                        if(checkMenuNameLv2.rows.length > 0){\r\n                          throw Error(\"Menu Name นี้มีในระบบเเล้ว\");\r\n                        }else{\r\n                          let id_menu = uuidv4();\r\n                          await client.query(_QuerymasterMenu.addMenu,[\r\n                            id_menu,\r\n                            model.menu_name,\r\n                            model.menu_parent_lv1,\r\n                            true,\r\n                            true,\r\n                            moment(new Date()),\r\n                            moment(new Date()),\r\n                            user_id,\r\n                            user_id,\r\n                            model.menu_level,\r\n                            model.menu_path,\r\n                            model.menu_image\r\n                          ])\r\n                        }\r\n                      }else{\r\n                        throw Error(\"ไม่พบ Menu Parent\");\r\n                      }\r\n               \r\n                    // }else{\r\n                    //   throw Error(\"is not menu_level\");\r\n                    // }\r\n                  }\r\n                }\r\n                resolve(true);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n             /*  console.log(e); */\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n\r\n    async getMenuByID(mm_id) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                let finaDataMenu = [];\r\n                let checkMmMenu = await client.query(_QuerymasterMenu.checkMmMenu,[\r\n                  mm_id,\r\n                ])\r\n                if(checkMmMenu.rows.length > 0){\r\n                  for(let item of checkMmMenu.rows){\r\n                   let data = {\r\n                      menu_id: item.mm_id,\r\n                      menu_name: item.mm_name,\r\n                      menu_mm_id: item.mm_id,\r\n                      menu_level: 1,\r\n                      menu_path: item.menu_path,\r\n                      menu_image: item.menu_image \r\n                    }\r\n                    finaDataMenu.push(data);\r\n                  }\r\n                }else{\r\n                  console.log(\"นี้หรอ\",mm_id);\r\n                  let getMenu = await client.query(_QuerymasterMenu.getMenu,[\r\n                    mm_id,\r\n                  ])\r\n                  for(let item of getMenu.rows){\r\n                    let data = {\r\n                       menu_id: item.menu_id,\r\n                       menu_name: item.menu_name,\r\n                       menu_mm_id: item.menu_mm_id,\r\n                       menu_level: item.menu_level,\r\n                       menu_path: item.menu_path,\r\n                       menu_image: item.menu_image \r\n                     }\r\n                     finaDataMenu.push(data);\r\n                   }\r\n                }\r\n         \r\n                resolve(finaDataMenu);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n             /*  console.log(e); */\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n\r\n\r\n    async filter(model) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                let filterMenu = [];\r\n                console.log(\"model0\",model);\r\n                if(model.menu_level === \"1\"){\r\n                   filterMenu = await client.query(_QuerymasterMenu.filterMenusLv1,[\r\n                    model.menu_name || null,\r\n                    model.menu_parent_id || null,\r\n                  ])\r\n                }else{\r\n                  filterMenu = await client.query(_QuerymasterMenu.filterMenusLv2,[\r\n                    model.menu_name || null,\r\n                    model.menu_parent_id || null,\r\n                  ])\r\n                }\r\n\r\n                resolve(filterMenu.rows);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n             /*  console.log(e); */\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n      \r\n\r\n    async delMenu(mm_id) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n\r\n                await client.query(_QuerymasterMenu.delMenu,[\r\n                    mm_id,\r\n                  ])\r\n  \r\n                resolve(true);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n             /*  console.log(e); */\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n      \r\n    async updateMenu(model,user_id) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n\r\n                if(model.menu_level === 1 ){\r\n                    await client.query(_QuerymasterMenu.updateMasterMenu,[\r\n                    model.menu_id,\r\n                    model.menu_name,\r\n                    moment(new Date()),\r\n                    model.menu_path,\r\n                    model.menu_image\r\n                  ])\r\n                }else if(model.menu_level === 2){\r\n                  await client.query(_QuerymasterMenu.updateMenu,[\r\n                    model.menu_id,\r\n                    model.menu_name,\r\n                    model.menu_mm_id,\r\n                    moment(new Date()),\r\n                    user_id,\r\n                    model.menu_path,\r\n                    model.menu_image\r\n                  ])\r\n                }else{\r\n                  throw Error(\"Not Menu Level\");\r\n                }\r\n                resolve(true);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e); \r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n      \r\n      \r\n\r\n      \r\n    async getPermissByUser(user_id) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                console.log(\"sevice\",user_id);\r\n    \r\n          var result_getPermissMenu;\r\n          var result_getcompany;\r\n          var result_getUserData;\r\n\r\n                await getcompany(user_id).then(res=>{\r\n                  result_getcompany= res;\r\n               });\r\n                await getPermissMenu(user_id).then(res=>{\r\n                  result_getPermissMenu= res;\r\n               });\r\n                await getUserData(user_id).then(res=>{\r\n                  result_getUserData= res;\r\n               });\r\n\r\n                // console.log(\"compa\",getcompanyList)\r\n                // console.log(\"getUser\",getUser)\r\n                // console.log(\"compa\",getPermissMenuLlist)\r\n             \r\n                var data = {\r\n                  company:result_getcompany,\r\n                  menu:result_getPermissMenu,\r\n                  user:result_getUserData,\r\n                } \r\n\r\n                resolve(data);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e); \r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n}\r\n\r\nasync function getcompany(user_id){\r\n\r\n  var client = new Client(connectionConfig);\r\n  await client.connect();\r\n  try {\r\n    /////———query———////////\r\n    let temp = await client.query(_QuerymasterMenu.getCompanyByIdUser,[\r\n      user_id,\r\n    ])\r\n    /* let finaltemp = temp.rows; */\r\n\r\n    return temp.rows;\r\n\r\n  } catch (e) {\r\n     console.log(e)\r\n  } finally {\r\n    await client.end();\r\n  }\r\n}\r\n\r\n\r\nasync function getPermissMenu(user_id){\r\n\r\n  var client = new Client(connectionConfig);\r\n  await client.connect();\r\n  try {\r\n    let temp = await client.query(_QuerymasterMenu.getPermissMenuById,[\r\n      user_id,\r\n    ])\r\n\r\n    // let array = [];\r\n    // for(let item of temp.rows){\r\n    //   var check = array.filter((e)=>{return e.menu_id === item.menu_id});\r\n    //   if(check.length > 0){\r\n    //     var index = array.findIndex((e2)=> e2.menu_id === item.menu_id);\r\n    //     // array[index].list.menus_name.push({menu: item.menu_name});\r\n    //   }else{\r\n    //     let list = {\r\n    //       menu_id:item.menu_id,\r\n    //       menus_name: item.menu_name,\r\n    //       user_id: item.iu_id,\r\n    //       menu_company_id: item.menu_company_id,\r\n    //       menu_id: item.menu_id,\r\n    //       mm_name: item.mm_name,\r\n\r\n    //     }\r\n    //     array.push(list)\r\n        \r\n    //   }\r\n    // }\r\n\r\n    // console.log(\"aaa\",array);\r\n\r\n    return temp.rows;\r\n\r\n  } catch (e) {\r\n     console.log(e)\r\n  } finally {\r\n    await client.end();\r\n  }\r\n}\r\n\r\n\r\nasync function getUserData(user_id){\r\n\r\n  var client = new Client(connectionConfig);\r\n  await client.connect();\r\n  try {\r\n    /////———query———////////\r\n    let temp = await client.query(_QuerymasterMenu.getUser,[\r\n      user_id,\r\n    ])\r\n    let finaltemp = temp.rows[0];\r\n    return finaltemp;\r\n\r\n  } catch (e) {\r\n     console.log(e)\r\n  } finally {\r\n    await client.end();\r\n  }\r\n}\r\n\r\nmodule.exports = masterMenuService;\n\n//# sourceURL=webpack://track-tire-backend/./app/service/masterMenuService.js?");

/***/ }),

/***/ "./app/service/permissionService.js":
/*!******************************************!*\
  !*** ./app/service/permissionService.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryPermission = __webpack_require__(/*! ../query/queryPermission.json */ \"./app/query/queryPermission.json\");\r\n\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { cli } = __webpack_require__(/*! webpack */ \"webpack\");\r\n\r\nclass permissionService {\r\n  /* \r\n    async addMaterial(model, user_id) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                var query = await client.query(_QueryMaterial.checkNameMaterial, [\r\n                  model.no,\r\n                  model.oem_id,\r\n                ]);\r\n                if (query.rows.length > 0) {\r\n                  reject({\r\n                    message: \"already material no\",\r\n                  });\r\n                }\r\n                let material_id = uuidv4();\r\n               \r\n                console.log(\"COMMIT\");\r\n                resolve(true);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n */\r\n\r\n  async findByUserIdPermission(material_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.findByUserId, [\r\n              material_id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAll_ICON() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getAll_icon, [\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async getAllMenu() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getAllMenu);\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllUser() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getAllUser);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllFeatureUser() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getAllFeatureUser);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllFeature() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getAllFeature);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterFeature(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.filterFeature,[\r\n              model.feature || null,\r\n              model.menu_id || null,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async get_Level_all() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.get_level_all);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addFeature(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            //console.log(model)\r\n            var checkFeature = await client.query(\r\n              _QueryPermission.checkNameFeature,\r\n              [model.feature,model.menu_id]\r\n            );\r\n            if(checkFeature.rows.length > 0){\r\n              throw Error(\"Feature Name Already!!\");\r\n            }\r\n\r\n            var query_sort = await client.query(_QueryPermission.checkFeature);\r\n            let sort = query_sort.rows[0].max;\r\n            let id = uuidv4();\r\n            /*    if(model.level == 1){\r\n                  let icon = null;\r\n                  let parent_id = null;\r\n                }else if(model.level == 2){\r\n                  let parent_id = model.parent_id;\r\n                } */\r\n            await client.query(_QueryPermission.addFeature, [\r\n              id,\r\n              model.feature,\r\n              model.menu_id,\r\n              sort + 1,\r\n              moment(new Date()),\r\n              user_id,\r\n              user_id,\r\n              moment(new Date()),\r\n              true,\r\n              model.display_feature,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addFeatureUser(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            var checkFeatureUser = await client.query(\r\n              _QueryPermission.checkFeatureUser,\r\n              [\r\n                model.user_id,\r\n                model.feature_id,\r\n              ]\r\n            );\r\n            if(checkFeatureUser.rows.length > 0){\r\n              throw Error(\"Feature and User has Already!!\");\r\n            }\r\n\r\n            let id = uuidv4();\r\n\r\n            await client.query(_QueryPermission.addFeatureUser, [\r\n              id,\r\n              model.user_id,\r\n              true,\r\n              model.feature_id,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addMenu(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            var query_sort = await client.query(_QueryPermission.checkMenuSort);\r\n            let sort = query_sort.rows[0].max;\r\n            let id = uuidv4();\r\n            /*    if(model.level == 1){\r\n                  let icon = null;\r\n                  let parent_id = null;\r\n                }else if(model.level == 2){\r\n                  let parent_id = model.parent_id;\r\n                } */\r\n                console.log(model)\r\n               \r\n            await client.query(_QueryPermission.addMenu, [\r\n              id,\r\n              model.name || null,\r\n              model.path || null,\r\n              model.parent_id || null,\r\n              model.level,\r\n              moment(new Date()),\r\n              user_id,\r\n              moment(new Date()),\r\n              user_id,\r\n              true,\r\n              sort + 1,\r\n              model.icon || null,\r\n              model.image_name || null,\r\n              model.image_path || null,\r\n              model.is_image === \"image\" ? true : false,\r\n              model.display_name || null,\r\n\r\n              model.academy || null,\r\n              model.academy_image_name || null,\r\n              model.academy_image_path || null,\r\n              model.academy_image || null,\r\n             \r\n            ]);\r\n           \r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateMenu(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            console.log(model);\r\n            //throw Error(\"break\");\r\n            await client.query(_QueryPermission.updateMenu, [\r\n              model.id,\r\n              model.name || null,\r\n              model.display_name || null,\r\n              model.path || null,\r\n              moment(new Date()),\r\n              user_id,\r\n              model.parent_id || null,\r\n              model.icon || null,\r\n              model.image_name || null,\r\n              model.image_path || null,\r\n              model.is_image === \"image\" ? true : false,\r\n\r\n              model.academy || null,\r\n              model.academy_image_name || null,\r\n              model.academy_image_path || null,\r\n              model.academy_image || null,\r\n\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateFeature(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            await client.query(_QueryPermission.updateFeature, [\r\n              model.id,\r\n              model.feature,\r\n              model.display_feature,\r\n              model.menu_id,\r\n              user_id,\r\n              moment(new Date()),\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateFeature_user(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n\r\n            console.log(model)\r\n          \r\n             await client.query(_QueryPermission.delFeaturePemission,[model.user_id]);\r\n             for(let index = 0; index < model.feature.length; index++){\r\n                let pf_id = uuidv4();\r\n                await client.query(_QueryPermission.addFeaturePemission, [\r\n                  pf_id,\r\n                  model.user_id,\r\n                  true,\r\n                  model.feature[index].id,\r\n                ]);\r\n             }\r\n          /*   await client.query(_QueryPermission.updateFeatureUser, [\r\n              model.id,\r\n              model.user_id,\r\n              model.feature_id,\r\n            ]); */\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delMenu(id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var query = await client.query(_QueryPermission.checkSupMenu, [id]);\r\n            if (query.rows[0].count > 0) {\r\n              reject({\r\n                message: \"Don't delete because have sup menu\",\r\n              });\r\n            } else {\r\n              await client.query(_QueryPermission.delMenu, [id]);\r\n              console.log(\"COMMIT\");\r\n              resolve(true);\r\n            }\r\n            /*   reject({\r\n                message: query,\r\n              }); */\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delfeature(id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          console.log(id);\r\n          try {\r\n            await client.query(_QueryPermission.delFeature, [id]);\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delfeature_user(id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          console.log(id);\r\n          try {\r\n            await client.query(_QueryPermission.delFeatureUser, [id]);\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterMenuLv1(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            var temp = await client.query(_QueryPermission.filterMenuLv1, [\r\n              model.name || null,\r\n            ]);\r\n\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterMenuLv2(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            var temp = await client.query(_QueryPermission.filterMenuLv2, [\r\n              model.name || null,\r\n              model.parent_id,\r\n            ]);\r\n\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async get_Level_1(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.get_level_1,[\r\n              model.name || null,\r\n              model.path || null,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async get_Level_2(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(model)\r\n            let temp = await client.query(_QueryPermission.get_level_2,[\r\n              model.name || null,\r\n              model.path || null,\r\n              model.parent_id || null,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async get_Level_3(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.get_level_3,[\r\n              model.name || null,\r\n              model.path || null,\r\n              model.parent_id || null,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findLevelById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.find_level_Byid, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findFeatureById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.findByFeatureId, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findFeatureUserById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(\r\n              _QueryPermission.findByFeatureUserDataId,\r\n              [id]\r\n            );\r\n            console.log(temp.rows)\r\n          \r\n              resolve(temp.rows);\r\n        \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async getLevel2ByLv1(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n             \r\n          try {\r\n            //console.log(model)\r\n            const arr = [];\r\n            for(var i=0; i < model.length;i++){\r\n              var temp = await client.query(_QueryPermission.getLevelByLv,[model[i].menu_parent]);\r\n              for(var t=0; t < temp.rows.length;t++){\r\n                arr.push(temp.rows[t]);\r\n              }\r\n              \r\n            }\r\n            //console.log(arr)\r\n            if (arr.length > 0) {\r\n              resolve(arr);\r\n            } else {\r\n              resolve(arr);\r\n            } \r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getLevel3ByLv2(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n             \r\n          try {\r\n            console.log(model)\r\n            const arr = [];\r\n            for(var i=0; i < model.length;i++){\r\n              var temp = await client.query(_QueryPermission.getLevelByLv,[model[i].menu_parent]);\r\n              for(var t=0; t < temp.rows.length;t++){\r\n                arr.push(temp.rows[t]);\r\n              }\r\n              \r\n            }\r\n            console.log(arr)\r\n            if (arr.length > 0) {\r\n              resolve(arr);\r\n            } else {\r\n              resolve(arr);\r\n            } \r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  \r\n  async addMenuPermission(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n             \r\n          try {\r\n            console.log(model)\r\n            const arr = [];\r\n       \r\n              await client.query(_QueryPermission.delMenuPermission,[model[0].user_id]);\r\n      \r\n            for(var i=0; i < model.length;i++){\r\n              let pm_id = uuidv4();\r\n            await client.query(_QueryPermission.addMenuPermission,[pm_id,model[i].menu_id,true, model[i].user_id]);\r\n            }\r\n            console.log(arr)\r\n            resolve(true);\r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findMenuPermissionByUserId(user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n             \r\n          try {\r\n          \r\n          \r\n         \r\n              var temp = await client.query(_QueryPermission.findMenuPermissionByUserId,[user_id]);\r\n               console.log(temp.rows)\r\n              \r\n            \r\n            //console.log(arr)\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            } \r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async getMenuByUserID(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getMenuByUserId, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getFeatureByUserID(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getFeatureByUserId, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n             var temp_Default = {\r\n                user_id:id,\r\n                menu:\"\",\r\n                feature:\"\",\r\n              };\r\n              resolve([temp_Default]);\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n  async sorting_menu(data,admin_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n            let menuByLevel = await client.query(_QueryPermission.getMenuByLevel, [\r\n                data.menu_level,\r\n              ]);\r\n            \r\n\r\n            if (menuByLevel.rows.length === 0) {\r\n              reject(\"not found\");\r\n            }\r\n\r\n            \r\n            if (data.sort_type===\"sort_up\") {\r\n              let menu_for_swap = {};\r\n            for (let index = 0; index < menuByLevel.rows.length; index++) {\r\n              if (data.current_sort_id === menuByLevel.rows[index].id) {\r\n                menu_for_swap[\"menu_id\"] = menuByLevel.rows[index-1].id;\r\n                menu_for_swap[\"menu_sort\"] = menuByLevel.rows[index-1].sort;\r\n              }\r\n            }\r\n\r\n\r\n           /*  console.log(  menuByLevel); */\r\n           /*  console.log(menu_for_swap.menu_id); */\r\n            \r\n            await client.query(_QueryPermission.update_sort, [\r\n              moment(new Date()),\r\n                admin_id,\r\n              menu_for_swap.menu_sort,\r\n              data.current_sort_id,\r\n            ]);\r\n            \r\n            \r\n            await client.query(_QueryPermission.update_sort, [\r\n              moment(new Date()),\r\n              admin_id,\r\n              data.current_sort,\r\n              menu_for_swap.menu_id,\r\n            ]);\r\n\r\n           \r\n\r\n            }else if (data.sort_type===\"sort_down\"){\r\n\r\n              let menu_for_swap = {};\r\n              for (let index = 0; index < menuByLevel.rows.length; index++) {\r\n                if (data.current_sort_id === menuByLevel.rows[index].id) {\r\n                  menu_for_swap[\"menu_id\"] = menuByLevel.rows[index+1].id;\r\n                  menu_for_swap[\"menu_sort\"] = menuByLevel.rows[index+1].sort;\r\n                }\r\n              }\r\n              await client.query(_QueryPermission.update_sort, [\r\n                moment(new Date()),\r\n                  admin_id,\r\n                menu_for_swap.menu_sort,\r\n                data.current_sort_id,\r\n              ]);\r\n              \r\n              \r\n              await client.query(_QueryPermission.update_sort, [\r\n                moment(new Date()),\r\n                admin_id,\r\n                data.current_sort,\r\n                menu_for_swap.menu_id,\r\n              ]);\r\n  \r\n             \r\n            }\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n    \r\n  async getOEMByUserID(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getOEMByUserID, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async findOemUserById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(id);\r\n            let temp = await client.query(_QueryPermission.findOemUserById, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              resolve([]);\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  async updateOem_user(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n\r\n            console.log(model)\r\n          \r\n            \r\n             \r\n             if ( model.oem.length > 0) {\r\n\r\n              await client.query(_QueryPermission.delOemPermission,[model.user_id]);\r\n\r\n                  for(let index = 0; index < model.oem.length; index++){\r\n                let pf_id = uuidv4();\r\n                await client.query(_QueryPermission.addOemPermission, [\r\n                  pf_id,\r\n                  model.user_id,\r\n                  model.oem[index].id,\r\n                  true,\r\n                ]);\r\n             }\r\n\r\n             }\r\n          \r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = permissionService;\r\n\n\n//# sourceURL=webpack://track-tire-backend/./app/service/permissionService.js?");

/***/ }),

/***/ "./app/service/userService.js":
/*!************************************!*\
  !*** ./app/service/userService.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\nvar _baseService = new baseService();\nvar _QueryLogin = __webpack_require__(/*! ../query/queryLogin.json */ \"./app/query/queryLogin.json\")\nvar _QueryUser = __webpack_require__(/*! ../query/queryUser.json */ \"./app/query/queryUser.json\")\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\nconst connectionPool = connectionSetting.connectionPool;\nconst connectionConfig = connectionSetting.config;\nvar moment = __webpack_require__(/*! moment */ \"moment\");\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\nconst cryptoOption = __webpack_require__(/*! ../cryptoSetting */ \"./app/cryptoSetting.js\");\nclass userService{\n    async checkAuth(user){\n        return _baseService.baseQueryWithParameter(_QueryLogin.getByUser,[user])\n    }\n    async updateAdminToken(token,token_create,token_exp,user){\n        return _baseService.baseQueryWithParameter(_QueryLogin.updateAdminToken,[token,token_create,token_exp,user])\n    }\n    async updateUserToken(token,token_create,token_exp,user){\n        return _baseService.baseQueryWithParameter(_QueryLogin.updateUserToken,[token,token_create,token_exp,user])\n    }\n    async checkAdminAuth(id){\n        return _baseService.baseQueryWithParameter(_QueryLogin.getByAdmin,[id])\n    }\n\n   \n    async getUserById(user_id) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            (async () => {\n              var client = new Client(connectionConfig);\n              await client.connect();\n              try {\n              \n                var data = await client.query(_QueryUser.getUserById,[user_id]);\n           \n          \n                console.log(data.rows[0]);\n                resolve(data.rows[0]);\n              } catch (e) {\n                reject(e);\n              } finally {\n                await client.end();\n              }\n            })().catch((e) => {\n              console.log(e);\n              throw Error(e);\n            });\n          } catch (e) {\n            reject(e);\n          }\n        });\n      }\n\n\n      async update(model,user_id) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            (async () => {\n              var client = new Client(connectionConfig);\n              await client.connect();\n              try {\n              \n            console.log(model)\n           \n                await client.query(_QueryUser.update,[\n                    user_id,\n                    model.name,\n                    model.sirname,\n                    model.email,\n                    model.mobile1,\n                    model.mobile2,\n                    model.detail,\n                    model.user_profile,\n                    model.user_profile_name,\n                    model.user_profile_path,\n                ]);\n               \n                resolve(true);\n              } catch (e) {\n                reject(e);\n              } finally {\n                await client.end();\n              }\n            })().catch((e) => {\n              console.log(e);\n              throw Error(e);\n            });\n          } catch (e) {\n            reject(e);\n          }\n        });\n      }\n\n      async changePS(model,user_id) {\n        return new Promise(async (resolve, reject) => {\n          try {\n            (async () => {\n              var client = new Client(connectionConfig);\n              await client.connect();\n              try {\n              \n           // console.log(cryptoOption.encrypt(model.old_pass));\n            var check = await client.query(_QueryUser.checkPS,[user_id])    \n            console.log(cryptoOption.decrypt(check.rows[0].password))   \n            console.log(model.old_pass)   \n\n            console.log(check.rows[0].password)\n            console.log(cryptoOption.encrypt(model.old_pass))   \n            \n                if(cryptoOption.decrypt(check.rows[0].password) === model.old_pass){\n                    console.log(\"รหัสเดิม ถูกต้อง\")\n                    await client.query(_QueryUser.changePS,[\n                        user_id,\n                        cryptoOption.encrypt(model.new_pass),\n                    ]);\n                    resolve(true);\n                }else{\n                    throw Error(\"รหัสผ่านเดิมไม่ถูกต้อง !!!\");\n                  \n                }\n           \n              } catch (e) {\n                reject(e);\n              } finally {\n                await client.end();\n              }\n            })().catch((e) => {\n              console.log(e);\n              throw Error(e);\n            });\n          } catch (e) {\n            reject(e);\n          }\n        });\n      }\n\n\n\n}\nmodule.exports = userService;\n\n//# sourceURL=webpack://track-tire-backend/./app/service/userService.js?");

/***/ }),

/***/ "./app/service/vehicleService.js":
/*!***************************************!*\
  !*** ./app/service/vehicleService.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\n\r\n\r\nconst connectionSetting_vehicle = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool_vehicle = connectionSetting_vehicle.connectionPool_vehicle;\r\nconst connectionConfig_vehicle = connectionSetting_vehicle.config_vehicle;\r\n\r\nconst _QueryVehicle = __webpack_require__(/*! ../query/queryVehicle.json */ \"./app/query/queryVehicle.json\");\r\n\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { cli } = __webpack_require__(/*! webpack */ \"webpack\");\r\n\r\nclass vehicleService {\r\n\r\n  async filterVehicle(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n            var page = 0\r\n            var page_number = 0\r\n            var page_number_start = 0\r\n            var page_number_end = 0\r\n          if (model.page_number !== null || model.page !== null ) {\r\n            page = model.page\r\n            page_number  = model.page_number\r\n          }else{\r\n            page = 1\r\n            page_number = 8\r\n          }\r\n          page_number_start = (page_number * page) - 8\r\n          page_number_end = (page_number * page) - 1\r\n\r\n            let checkfilterVehicle = await client.query(_QueryVehicle.getFilterVehicle, [\r\n              /* model.company_id, */\r\n              page_number_start,\r\n              page_number_end,\r\n            ]);\r\n\r\n            \r\n            \r\n           /*  for (let index = 0; row < 8; index=index + 8) { */\r\n              \r\n        console.log(page_number,checkfilterVehicle)\r\n            for (let item of checkfilterVehicle.rows) {\r\n            let data = {\r\n\r\n              vehicle_id:item.vehicle_id,\r\n              vehicle_plate_number:item.vehicle_plate_number,\r\n              vehicle_responsible_person:null,\r\n              vehicle_main_driver:item.vehicle_main_driver_id,\r\n              vehicle_sub_driver:item.vehicle_sub_driver_id,\r\n              vehicle_image: null,\r\n              image_path:null,\r\n              image_name:null,\r\n              vehicle_type:item.vehicle_type_id,\r\n              vehicle_basic_detail:item.vehicle_detail,\r\n              vehicle_brand:item.vehicle_brand,\r\n              vehicle_box_number:item.vehicle_vin,\r\n              vehicle_insue_expired:item.vehicle_insurance_expire_date,\r\n              vehicle_act_lasted:null,\r\n\r\n            };\r\n            \r\n            filter_Vehicle_list.push(data);\r\n            };\r\n          /* }; */\r\n\r\n           resolve(filter_Vehicle_list)\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  } \r\n\r\n\r\n    async delVehicle(vt_id) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n               await client.query(_QueryVehicle.delVehicle,[\r\n                vehicle_id,\r\n                ])\r\n             resolve(true);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n\r\n\r\n \r\n}\r\n\r\n\r\nmodule.exports = vehicleService;\r\n\n\n//# sourceURL=webpack://track-tire-backend/./app/service/vehicleService.js?");

/***/ }),

/***/ "body-parser":
/*!******************************!*\
  !*** external "body-parser" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("body-parser");

/***/ }),

/***/ "cookie-parser":
/*!********************************!*\
  !*** external "cookie-parser" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("cookie-parser");

/***/ }),

/***/ "cors":
/*!***********************!*\
  !*** external "cors" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("cors");

/***/ }),

/***/ "crypto-js":
/*!****************************!*\
  !*** external "crypto-js" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto-js");

/***/ }),

/***/ "debug":
/*!************************!*\
  !*** external "debug" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("debug");

/***/ }),

/***/ "dotenv":
/*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("dotenv");

/***/ }),

/***/ "express":
/*!**************************!*\
  !*** external "express" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("express");

/***/ }),

/***/ "express-basic-auth":
/*!*************************************!*\
  !*** external "express-basic-auth" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("express-basic-auth");

/***/ }),

/***/ "http-errors":
/*!******************************!*\
  !*** external "http-errors" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("http-errors");

/***/ }),

/***/ "jwt-simple":
/*!*****************************!*\
  !*** external "jwt-simple" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("jwt-simple");

/***/ }),

/***/ "mime":
/*!***********************!*\
  !*** external "mime" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("mime");

/***/ }),

/***/ "moment":
/*!*************************!*\
  !*** external "moment" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("moment");

/***/ }),

/***/ "morgan":
/*!*************************!*\
  !*** external "morgan" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("morgan");

/***/ }),

/***/ "multiparty":
/*!*****************************!*\
  !*** external "multiparty" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("multiparty");

/***/ }),

/***/ "passport":
/*!***************************!*\
  !*** external "passport" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("passport");

/***/ }),

/***/ "passport-jwt":
/*!*******************************!*\
  !*** external "passport-jwt" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("passport-jwt");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("pg");

/***/ }),

/***/ "rotating-file-stream":
/*!***************************************!*\
  !*** external "rotating-file-stream" ***!
  \***************************************/
/***/ ((module) => {

"use strict";
module.exports = require("rotating-file-stream");

/***/ }),

/***/ "swagger-ui-express":
/*!*************************************!*\
  !*** external "swagger-ui-express" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("swagger-ui-express");

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("uuid");

/***/ }),

/***/ "webpack":
/*!**************************!*\
  !*** external "webpack" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("webpack");

/***/ }),

/***/ "xlsx":
/*!***********************!*\
  !*** external "xlsx" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("xlsx");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "./app/query/queryCompany.json":
/*!*************************************!*\
  !*** ./app/query/queryCompany.json ***!
  \*************************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('{\"findCompanyById\":\"select company_id, company_name, company_detail, company_start_date, company_expire_date, company_created_date, company_is_use, company_logo, company_logo_path, company_logo_name, company_updated_date, company_cm_id, company_abbr,now()::timestamp from \\\\\"company\\\\\" where company_id=$1 and company_is_use=true\"}');\n\n//# sourceURL=webpack://track-tire-backend/./app/query/queryCompany.json?");

/***/ }),

/***/ "./app/query/queryLogin.json":
/*!***********************************!*\
  !*** ./app/query/queryLogin.json ***!
  \***********************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('{\"updateUserToken\":\"update \\\\\"identity_user\\\\\" set \\\\\"iu_token\\\\\"=$1,\\\\\"iu_token_create\\\\\"=$2,\\\\\"iu_token_expired\\\\\"=$3 where \\\\\"iu_username\\\\\"=$4 and \\\\\"iu_is_use\\\\\"=true\",\"getById\":\"select * from login where \\\\\"Id\\\\\"=$1\",\"checkUserPassword\":\"select  iu_id, iu_company_id, iu_username, iu_password from identity_user where \\\\\"iu_username\\\\\"=$1 and \\\\\"iu_is_use\\\\\"=true\",\"getByUser\":\"select iu_username from identity_user where \\\\\"iu_username\\\\\"=$1 and \\\\\"iu_is_use\\\\\"=true limit 1\",\"checkAdminPassword\":\"select admin_id,admin_username from \\\\\"admin\\\\\" where \\\\\"admin_username\\\\\"=$1 and \\\\\"admin_password\\\\\"=$2 and \\\\\"admin_is_use\\\\\"=true\",\"updateAdminToken\":\"update \\\\\"admin\\\\\" set \\\\\"admin_token\\\\\"=$1,\\\\\"admin_token_created\\\\\"=$2,\\\\\"admin_token_expired\\\\\"=$3 where \\\\\"admin_username\\\\\"=$4 and \\\\\"admin_is_use\\\\\"=true\",\"getByAdmin\":\"select admin_username from \\\\\"admin\\\\\" where \\\\\"admin_id\\\\\"=$1 and \\\\\"admin_is_use\\\\\"=true limit 1\"}');\n\n//# sourceURL=webpack://track-tire-backend/./app/query/queryLogin.json?");

/***/ }),

/***/ "./app/query/queryPermission.json":
/*!****************************************!*\
  !*** ./app/query/queryPermission.json ***!
  \****************************************/
/***/ ((module) => {

"use strict";
eval("module.exports = {};\n\n//# sourceURL=webpack://track-tire-backend/./app/query/queryPermission.json?");

/***/ }),

/***/ "./app/query/queryUser.json":
/*!**********************************!*\
  !*** ./app/query/queryUser.json ***!
  \**********************************/
/***/ ((module) => {

"use strict";
eval("module.exports = {};\n\n//# sourceURL=webpack://track-tire-backend/./app/query/queryUser.json?");

/***/ }),

/***/ "./app/query/queryVehicle.json":
/*!*************************************!*\
  !*** ./app/query/queryVehicle.json ***!
  \*************************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('{\"delVehicle\":\"UPDATE vehicle SET vehicle_is_use= false WHERE  vehicle_id=$1;\",\"getFilterVehicle\":\"SELECT vehicle_id, vehicle_plate_number, vehicle_type_id, vehicle_is_use, vehicle_is_active, vehicle_created_date, vehicle_updated_date, vehicle_created_by, vehicle_updated_by, vehicle_brand, vehicle_vin, vehicle_insurance_expire_date, vehicle_detail, vehicle_main_driver_id, vehicle_sub_driver_id FROM vehicle where vehicle_is_use= true LIMIT page_number_start,page_number_end ;\"}');\n\n//# sourceURL=webpack://track-tire-backend/./app/query/queryVehicle.json?");

/***/ }),

/***/ "./app/query/querymasterMenu.json":
/*!****************************************!*\
  !*** ./app/query/querymasterMenu.json ***!
  \****************************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('{\"checkMasterMenu\":\"SELECT mm_id, mm_name, mm_is_use, mm_is_active, mm_created_date, mm_updated_date, mm_company_id, mm_path, mm_image FROM master_menu where mm_is_use = true;\",\"checkMenuByMmId\":\"SELECT mm_id, mm_name, mm_is_use, mm_is_active, mm_created_date, mm_updated_date, mm_company_id, menu_path, mm_image FROM master_menu where mm_is_use = true and mm_id = $1;\",\"addMasterMenu\":\"INSERT INTO master_menu(mm_id, mm_name, mm_is_use, mm_is_active, mm_created_date, mm_updated_date, mm_company_id, menu_path, menu_image)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9);\",\"addMenu\":\"INSERT INTO menu(menu_id, menu_name, menu_mm_id, menu_is_use, menu_is_active, menu_created_date, menu_updated_date, menu_created_by, menu_updated_by, menu_level, menu_path, menu_image)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12);\",\"checkMenuName\":\"SELECT mm_id, mm_name, mm_is_use, mm_is_active, mm_created_date, mm_updated_date, mm_company_id, mm_path, mm_image FROM master_menu where mm_name = $1 and mm_is_use = true;\",\"ckeckNameMenu\":\"SELECT menu_id, menu_name, menu_mm_id, menu_is_use, menu_is_active, menu_created_date, menu_updated_date, menu_created_by, menu_updated_by, menu_level, menu_path, menu_image FROM menu where menu_name = $1 and menu_is_use = true;\",\"getMenu\":\"SELECT menu_id, menu_name, menu_mm_id, menu_level, menu_path, menu_image FROM menu where menu_id = $1;\",\"filterMenusLv1\":\"SELECT mm_id as menu_id, mm_name as menu_name, mm_company_id, mm_path, mm_image FROM master_menu where ($1::text is null or mm_name LIKE \\'%\\' || $1 || \\'%\\') and ($2::uuid is null or mm_id = $2) and mm_is_use = true;\",\"filterMenusLv2\":\"SELECT a.menu_id, a.menu_name, a.menu_mm_id,a.menu_level, a.menu_path, a.menu_image,b.mm_id,b.mm_name FROM menu as a left join master_menu as b on a.menu_mm_id = b.mm_id where ($1::text is null or a.menu_name LIKE \\'%\\' || $1 || \\'%\\') and ($2::uuid is null or a.menu_mm_id = $2) and a.menu_is_use = true;\",\"delMenu\":\"UPDATE menu SET  menu_is_use = false WHERE menu_id = $1;\",\"checkupdate\":\"SELECT menu_id, menu_name, menu_mm_id, menu_is_use, menu_is_active, menu_created_date, menu_updated_date, menu_created_by, menu_updated_by, menu_level, menu_path, menu_image FROM menu where menu_id != $1 and menu_mm_id = $2 and menu_is_use = true;\",\"checkMmMenu\":\"SELECT mm_id, mm_name, mm_is_use, mm_is_active, mm_created_date, mm_updated_date, mm_company_id, mm_path, mm_image FROM master_menu where mm_id = $1;\",\"updateMasterMenu\":\"UPDATE master_menu SET mm_name=$2, mm_updated_date=$3,mm_path=$4, mm_image=$5 WHERE mm_id = $1;\",\"updateMenu\":\"UPDATE menu SET  menu_name=$2, menu_mm_id=$3, menu_updated_date=$4, menu_updated_by=$5, menu_path=$6, menu_image=$7 WHERE menu_id = $1;\",\"getCompanyByIdUser\":\"SELECT a.iu_id as user_id, a.iu_company_id as company_group_id,b.cg_name as company_group_name,c.company_id,c.company_name FROM identity_user as a left join company_group as b on a.iu_company_id = b.cg_id  left join company as c on b.cg_id = c.company_cm_id where a.iu_id = $1;\",\"getPermissMenuById_not\":\"SELECT a.iu_id, a.iu_company_id as menu_company_id ,b.mm_id as menu_id, b.mm_name,c.menu_name FROM identity_user as a left join master_menu as b on a.iu_company_id = b.mm_company_id left join menu as c on c.menu_mm_id = b.mm_id where a.iu_id = $1 and b.mm_is_use = true;\",\"getPermissMenuById\":\"SELECT a.pu_id as permission_id, a.pu_iu_id as user_id,b.pc_company_id as company_id,b.pc_menu_id,c.role_name,d.menu_name,e.mm_name as master_menu FROM permission_user as a left join permission_company as b on a.pu_pc_id = b.pc_id left join role as c on a.pu_role_id = c.role_id left join menu as d on b.pc_menu_id = d.menu_id left join master_menu as e on d.menu_mm_id = e.mm_id where a.pu_iu_id = $1;\",\"getUser\":\"SELECT iu_id, iu_company_id, iu_name, iu_sirname, iu_username, iu_email, iu_password, iu_mobile, iu_detail, iu_is_active, iu_token, iu_token_create, iu_token_expired, iu_create_date, iu_is_use, iu_user_profile, iu_user_profile_name, iu_user_profile_path FROM identity_user where iu_id = $1 and iu_is_use = true;\"}');\n\n//# sourceURL=webpack://track-tire-backend/./app/query/querymasterMenu.json?");

/***/ }),

/***/ "./app/swagger.json":
/*!**************************!*\
  !*** ./app/swagger.json ***!
  \**************************/
/***/ ((module) => {

"use strict";
eval("module.exports = JSON.parse('{\"swagger\":\"2.0\",\"info\":{\"version\":\"1.0.0\",\"title\":\"Save Yanng Project\",\"description\":\"Application Programming Interface (API)\"},\"host\":\"localhost:4000\",\"basePath\":\"/\",\"tags\":[{\"name\":\"Init\",\"description\":\"Application Programming Interface (API)\"}],\"paths\":{\"/\":{\"get\":{\"tags\":[\"Init\"],\"description\":\"Start Api\",\"parameters\":[{}],\"responses\":{\"200\":{\"description\":\"OK\"}}}}},\"schemes\":[\"http\"],\"consumes\":[\"application/json\"],\"produces\":[\"application/json\"]}');\n\n//# sourceURL=webpack://track-tire-backend/./app/swagger.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./app/bin/www.js");
/******/ 	
/******/ })()
;